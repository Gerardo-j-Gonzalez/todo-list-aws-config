pipeline {
    agent any
    stages {
        stage('Get Code') {
            steps {
                // Se obtiene el codigo de GitHub
                git branch: 'develop', url: 'https://github.com/Gerardo-j-Gonzalez/todo-list-aws.git'
                echo "El workspace actual es: ${env.WORKSPACE}"

                // Se descarga la configuraci贸n de la rama staging
                sh '''
                    rm -f samconfig.toml
                    git clone --depth 1 --branch staging https://github.com/Gerardo-j-Gonzalez/todo-list-aws-config.git config-repo
                    mv config-repo/samconfig.toml .
                    rm -rf config-repo
                '''

                echo "C贸digo y configuraci贸n descargados correctamente."
                stash name:'code', includes:'**'

            }
        }
        stage('Static Test') {
            steps {
                script {
                    unstash name:'code'

                    echo "Se realiza el analisis estatico con Flake8 y Bandit" 

                    // Ejecuta Flake8 y genera informe 
                    sh 'flake8 --exit-zero --format=pylint src >flake8.out'

                    // Ejecuta Bandit y genera informe 
                    sh 'bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"|| true'

                    echo "Generando los ficheros de los informes" 
                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
                }
            }
        }
        stage('Deploy') {
            agent {label 'principal'} 
            steps {
                script {
                    unstash name:'code'
                    echo "Se realiza el despliegue con AWS SAM..." 
                    // Se realiza la build del codigo
                    sh 'sam build' 
                    // Se hace la validacion de SAM
                    sh 'sam validate --region us-east-1' 

                    // Desplegamos utilizando la configuracion 'staging' que esta en samconfig.toml 
                    sh '''
                        sam deploy \
                            --config-env staging \
                            --parameter-overrides "CreateDynamoTable=false" \
                            --no-confirm-changeset \
                            --no-fail-on-empty-changeset
                    '''
                    echo "Despliegue correcto" 
                }
            }
        }    
        stage('Rest Test'){
            steps{
                script {
                    unstash name:'code'
                    echo "Obtenemos la URL del API desde CloudFormation" 
 
                    // Obtenemos `BASE_URL` desde los outputs de CloudFormation 
                    def BASE_URL = sh(
                        script: """
                            aws cloudformation describe-stacks --stack-name todo-list-aws-staging --region us-east-1 \
                                --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --output text
                        """,
                        returnStdout: true
                    ).trim()
                    
					// Si no se obtiene `BASE_URL` , se para el pipeline 
                    if (BASE_URL == "" || BASE_URL == "None") {
                        error "No se pudo obtener la URL del API. Verifica que el stack se haya desplegado correctamente." 
                    }
 
                    echo "API URL obtenida: ${BASE_URL}" 
 
                    // Definimos `BASE_URL` en el entorno del pipeline 
                    withEnv(["BASE_URL=${BASE_URL}"]) {
                        echo "Se ejecutan las pruebas REST con Pytest" 
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                python3 -m pytest --version
                                python3 -m pytest -s -v --junitxml=result-integration.xml test/integration/todoApiTest.py | tee result-integration.log
                            '''
                        }
                        
						echo "Se comrueba el resultado buscando en el log" 
                        def passedTests = sh(
                            script: "grep -c 'PASSED' result-integration.log || echo 0",
                            returnStdout: true
                        ).trim()
 
                        if (passedTests != "5") {
                            error "No se han superado todas las pruebas. Se necesitan 5 PASSED, pero se encontraron: ${passedTests}" 
                        }
 
                        echo "Todas las pruebas se han superado correctamente (${passedTests}/5)." 
                        echo "Se envian los resultados de las pruebas a XML para verlo en JENKINS" 
                        junit 'result-integration.xml' 
                    }
                }
            }
        }

		stage('Promote') {
            steps {
                script {
                    unstash name:'code'
                    
					echo "Promocion de la version a main" 
                    // Obtenemos el token desde los secretos de Jenkins 
                    withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'TOKEN')]) { 
                        // Configuramos el usuario de Git
                        sh ''' 
                            git config --global user.email "gerardo_j_gonzalez@hotmail.com" 
                            git config --global user.name "gerardo-j-gonzalez" 
                        ''' 
                        // Cambiamos la URL del repositorio para usar el token 
                        sh ''' 
                            git remote set-url origin https://$TOKEN@github.com/gerardo-j-gonzalez/todo-list-aws.git 
                            # Guardamos temporalmente cambios locales
                            git stash || true
                            # Cambiamos a la rama main y traer cambios
                            git fetch origin
                            git checkout main
                            git pull --rebase origin main
                            # Aplicamos los cambios
                            git stash pop || true
                        '''
                        
						echo "Mergeamos de la rama develop a la rama main" 
                        sh '''
                            git merge --no-ff develop -m "Mergeo automatico desde develop a main" || true
 
                            # Mantenemos la version correcta de los ficheros de configuraci贸n
                            git checkout --ours samconfig.toml || true
                            git add samconfig.toml || true
                            git checkout --ours CHANGELOG.md || true
                            git add CHANGELOG.md || true
                            git commit -m "Resolvemos el conflicto en CHANGELOG.md manteniendo la version de main" || true
                        '''
                        
						echo "Subimos los cambios a GitHub con push" 
                        sh '''
                            git push origin main
                        '''

                        echo "Promocion a main completada" 
                    }
                }
            }
        } 
    }
}